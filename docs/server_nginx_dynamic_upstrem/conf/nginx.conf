
#user  nobody;
worker_processes  3;

#error_log  logs/error.log;
#error_log  logs/error_restrt.log  notice;
error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    #default_type  application/octet-stream;
    default_type  text/html;

    #log_format  main  '$MY_UID,$time_local,$msec,$status,[rt:$request_time],[res_t:$upstream_response_time],$BIZ_TYPE,$arg_uid,$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$body_bytes_sent "$http_referer" "$http_user_agent" "$http_x_forwarded_for"';
    log_format  main  '$time_local,$msec,$status,[rt:$request_time],[res_t:$upstream_response_time],$arg_uid,$remote_addr - $remote_user [$time_local] "$request" '
                      '$body_bytes_sent "$http_referer" "$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;
    #log_format req_access '$time_local,$BIZ_TYPE, $arg_uid, $status';

    sendfile        on;
    #tcp_nopush     on;

    #proxy_set_header X-UID jackqin;
    # 第一个参数设置"keep-alive客户端长连接"将在"服务器端"继续打开的超时时间（默认是75秒，建议根据具体业务要求来，但必须要求所有客户端连接的"Keep-Alive"头信息与该值设置的相同(这里是5分钟)，同时与上游服务器(Tomcat)的设置是一样的）
    # 可选的第二个参数设置“Keep-Alive: timeout=time”响应头字段的值
    keepalive_timeout  65s 65s;

    # 设置通过"一个存活长连接"送达的最大请求数（默认是100，建议根据客户端在"keepalive"存活时间内的总请求数来设置）
    # 当送达的请求数超过该值后，该连接就会被关闭。（通过设置为5，验证确实是这样）
    keepalive_requests 3;
    #gzip  on;
    #

    upstream backend {
        zone zbackend 1m;
        server localhost:8082 weight=5;
        server localhost:8083 weight=5;
        server localhost:8084 weight=5 backup;

        # 连接到上游服务器的最大并发空闲keepalive长连接数（默认是未设置，建议与Tomcat Connector中的maxKeepAliveRequests值一样）
        # 当这个数被超过时，使用"最近最少使用算法(LUR)"来淘汰并关闭连接。
        keepalive 20;
    }

    upstream backend_test {
        zone zbackend_test 1m;
        server localhost:8081;
        keepalive 20;
    }


    # echo test server config
   # include vhost/echo_server.conf;
   # include common/cache.conf;
   # include vhost_lua/lua_server.conf;

   # include vhost/global_onoff_server.conf;

   # include bizgray/server7101.conf;
   # include bizgray/server7102.conf;

    server {
	    listen       8090;
        server_name  localhost;
        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        location /dynamic {
            allow 127.0.0.1;
            deny all;
            dynamic_upstream;
        }

        # location /nginx_status {
        #     stub_status on;
        #     access_log   off;
        #     allow 127.0.0.1;
        # }
        location /echoself {
	        echo "haha, good. 8080 http_wakawa";	
	    }

        location /echo {
            proxy_pass http://backend;
	    }
        
        location /ups_add_server {
            default_type text/plain;
            set $ipaddr  $arg_ipaddr;

            content_by_lua '
                local ups_name = "backend"
                local ip_addr = ngx.var.ipaddr

                local upstream = require "ngx.upstream"
                local add_server = upstream.add_server
                -- ngx.print("ip_addr: " .. ip_addr)
                local ok,err = add_server(ups_name, ip_addr, 1, 1, 10, false)
                ngx.print("add server: " .. ip_addr .. " done. \\n")
            ';
        }

        location /ups_remove_server {
            default_type text/plain;
            set $ipaddr  $arg_ipaddr;

            content_by_lua '
                local ups_name = "backend"
                local ip_addr = ngx.var.ipaddr

                local upstream = require "ngx.upstream"
                local remove_server = upstream.remove_server
                -- ngx.print("ip_addr: " .. ip_addr)
                local ok,err = remove_server(ups_name, ip_addr)
                ngx.print("remove server: " .. ip_addr .. " done. \\n")
            ';
        }

        location /ups {
            default_type text/plain;
            content_by_lua '
                local concat = table.concat
                local upstream = require "ngx.upstream"
                local get_servers = upstream.get_servers
                local get_upstreams = upstream.get_upstreams
                
                local us = get_upstreams()
                for _, u in ipairs(us) do
                    ngx.say("upstream ", u, ":")
                    local srvs, err = get_servers(u)
                    if not srvs then
                        ngx.say("failed to get servers in upstream ", u)
                    else
                        for _, srv in ipairs(srvs) do
                            local first = true
                            for k, v in pairs(srv) do
                                if first then
                                    first = false
                                    ngx.print("    ")
                                else
                                    ngx.print(", ")
                                end
                                if type(v) == "table" then
                                    ngx.print(k, " = {", concat(v, ", "), "}")
                                else
                                    ngx.print(k, " = ", v)
                                end
                            end
                            ngx.print("\\n")
                        end
                    end
                end
            ';
        }
    }
    

    
    server {
	    listen       8081;
        server_name  localhost;
        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }
        location /echo {
	        echo "haha, good. 8081 http_wakawa";	
	    }
    }
    server {
	    listen       8082;
        server_name  localhost;
        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }
        location /echo {
	        echo "haha, good. 8082 http_wakawa";	
	    }
    }
    server {
	    listen       8083;
        server_name  localhost;
        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }
        location /echo {
	        echo "haha, good. 8083 http_wakawa";	
	    }
    }
    server {
	    listen       8084;
        server_name  localhost;
        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }
        location /echo {
	        echo "haha, good. 8084 http_wakawa";	
	    }
    }
    server {
	    listen       8085;
        server_name  localhost;
        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }
        location /echo {
	        echo "haha, good. 8085 http_wakawa";	
	    }
    }

}

