lua_shared_dict dict_rule_data 16m;
lua_shared_dict dogs 1m;

init_by_lua '
    package.path = string.format("$s;./lua/com/qtj/bgpub/?.lua;./lua/lib/?.lua;./lua/conf/?.lua;", package.path)
    cjson = require "cjson"
    lua_code_cache = on
';

init_worker_by_lua_block {
    local bluegreen_api = require("api.bluegreen_api")
    bluegreen_api:init_worker()
} 

server {
    listen 8899;
    server_name  localhost;

    location = /favicon.ico {
            log_not_found off;
            access_log off;
    }

    # 读取redis服务对应的规则数据，存入到 nginx dict 中
    #
    # curl "http://localhost:8899/bgpub/ruleset?service=ss,apollo,aka"
    location /bgpub/rule/set {
        set $service_name $arg_service;
        content_by_lua_block {
            local s_key = ngx.var.service_name  --服务名
            local conf = {["s_key"] = s_key}

            local bluegreen_api = require("api.bluegreen_api")
            local code, result = bluegreen_api:ruleset(conf)

            if not code then
                ngx.say(string.format("%d, %s", -1, cjson.encode(result)))
            else
                ngx.say(string.format("%d, %s", code, cjson.encode(result)))
            end
            
        }
    }

    # get rule data from ngx.shared.dict.  limit 100 item. 
    # can query a service by:  service=xxx
    #
    # curl "http://localhost:8899/bgpub/ruleget?service=apollo"
    location /bgpub/rule/get {
        set $service_name $arg_service;

        content_by_lua_block {
            local s_key = ngx.var.service_name  --服务名
            local conf = {["s_key"] = s_key}

            local bluegreen_api = require("api.bluegreen_api")
            local result, err = bluegreen_api:ruleget(conf)

            ngx.print(cjson.encode(result) .. "\n")
        }
    }

    # delete rule data by service_name
    #
    # curl "http://localhost:8899/bgpub/ruledelete?service=apollo"
    location /bgpub/rule/delete {
        set $service_name $arg_service;
        content_by_lua_block {
            local s_key = ngx.var.service_name  --服务名
            if not s_key or string.len(s_key) < 1 then
                ngx.say("no service")
            else 
                local conf = {["s_key"] = s_key}

                local bluegreen_api = require("api.bluegreen_api")
                local code, err = bluegreen_api:ruledelete(conf)
                ngx.say("Succeed delete rule data for [" .. s_key .. "]")
            end
        }
    }

    # update switch value, make sure value in configbase.switch_enum
    #
    # curl "http://localhost:8899/bgpub/switchupdate?service=apollo&switch=TEST"
    location /bgpub/switch/update {
        set $service_name $arg_service;
        set $switch_value $arg_switch;

        content_by_lua_block {
            local s_key = ngx.var.service_name  --服务名
            local switch_value = ngx.var.switch_value  
            if not s_key or string.len(s_key) < 1 then
                ngx.say("no service")
                return
            end

            if not switch_value or string.len(switch_value) < 1 then
                ngx.say("no switch data")
                return
            end

            local conf = {["s_key"] = s_key, ["switch_value"] = switch_value}
            local bluegreen_api = require("api.bluegreen_api")
            local code, err = bluegreen_api:switchupdate(conf)
            ngx.say(string.format("Update [%s]'s switch to %s. return code: %s, msg: %s", s_key, switch_value, code, err))
        }
    }

    # 动态upstream配置，参考 https://github.com/cubicdaiya/ngx_dynamic_upstream
    location /dynamic {
        allow 127.0.0.1;
        deny all;
        dynamic_upstream;
    }
    
    # 监控页
    location  /monitor.html {
        root /opt/app/biz-openresty/upssystem;
    }
    
    # 403 限制
    location / {
        return 403;
    }
}   