lua_shared_dict dict_rule_data 16m;

init_by_lua '
    package.path = string.format("$s;./lua/com/qtj/bgpub/?.lua;./lua/lib/?.lua;./lua/conf/?.lua;", package.path)
    cjson = require "cjson"
    lua_code_cache = on


    bluegreen_api = require("api.bluegreen_api")
';

server {
    listen 8899;
    server_name  localhost;

    location = /favicon.ico {
            log_not_found off;
            access_log off;
    }

    # location /bgpub/echo {
    # 	echo "bgpub";
    # }

    # location /bgpub/content_lua {
    #     content_by_lua_block {
    #         ngx.say("content: " .. package.path)
    #     }
    # }

    # location /bgpub/getservice {
    #     content_by_lua_block {
    #         local redis = require("dal.redis_dal")
    #         local result = redis.conn()
    #         ngx.say("result: " .. result)
    #         ngx.say("done")
    #     }
    # }

    # location /bgpub/redis {
    #     content_by_lua_block {
    #         local redis = require("api.redis_api")
    #         local redis_conn = redis.redisconn()
    #         ngx.say("done")
    #     }
    # }

    # 读取redis服务对应的规则数据，存入到 nginx dict 中
    location /bgpub/ruleset {
        set $service_name $arg_service;
        content_by_lua_block {
            local s_key = ngx.var.service_name  --服务名
            local conf = {["s_key"] = s_key}
            local code, result = bluegreen_api:ruleset(conf)
            if not code then
                ngx.say(string.format("%d, %s", -1, cjson.encode(result)))
            else
                ngx.say(string.format("%d, %s", code, cjson.encode(result)))
            end
            
        }
    }

    location /bgpub/ruleget {
        content_by_lua_block {
            local rule_data_cache = ngx.shared["dict_rule_data"]
            local switch_keys = rule_data_cache:get_keys(100)  
            local result = {} 
            for k, v in ipairs(switch_keys) do       
                result[v] = rule_data_cache:get(v)
            end
            ngx.print(cjson.encode(result) .. "\n")
        }
    }
}